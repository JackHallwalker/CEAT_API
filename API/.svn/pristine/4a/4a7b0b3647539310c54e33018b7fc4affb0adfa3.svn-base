using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Web;

using System.Security.Cryptography;

namespace SupremeCourtCore.Controller
{
    public interface AdminLoginController
    {
       // Boolean GetLoginDetails(string username, string password);
        AdminLogin GetLoginDetails(string username, string password);
        string Encryptword(string Encryptval);
        int CreateAdminUser(AdminLogin adminLogin);
        int UpdateUserName(AdminLogin adminLogin);
        int DeleteUser(int adminId);
        int UpdatePassword(AdminLogin adminLogin);
        /*List<UserType> GetUserTypes();*/
        List<AdminLogin> GetAllUsers();
    }

    public class AdminLoginControllerImpl : AdminLoginController
    {
        DBConnection dBConnection;
        AdminLoginDAO customerLoginDAO = DAOFactory.CreateAdminLoginDAO();
        string key = "1prt56";

        public AdminLogin GetLoginDetails(string username, string password)
        {
            try
            {
                dBConnection = new DBConnection();
                AdminLogin customerLogin = new AdminLogin();
                int user = customerLoginDAO.CheckUserName(username, dBConnection);
                //int result = customerLoginDAO.GetLoginDetails(username, password, dBConnection);
                if(user == 1)
                {
                    //int result = customerLoginDAO.GetLoginDetails(username, password, dBConnection);
                    customerLogin = customerLoginDAO.GetLoginDetails(username, password, dBConnection);
                    //customerLogin.CustomerMobileValidated = CustomerDAO.CustomerMobileValidated(username, dBConnection);

                    customerLogin.Password = "";
                   /* if(customerLogin.CustomerId != 0)
                    {
                        //customerLogin.CustomerMobileValidated = customerLoginDAO.GetCustomerIsMobileValidated(customerLogin.CustomerId, dBConnection);
                        //customerLogin.Message = "Successfully login";
                        //customerLoginDAO.UpdateIsLocked(username, 0, dBConnection);
                        customerLoginDAO.UpdateLoginAttemptsWithDate(username, 0, dBConnection);
                       
                    }
                    else
                    {
                        int maxCount = customerLoginDAO.GetLoginAttempts(username, dBConnection);
                        if(maxCount+1 >= 5)
                        {
                            customerLoginDAO.UpdateLoginAttempts(username, maxCount + 1, dBConnection);
                            customerLoginDAO.UpdateIsLocked(username, 1, dBConnection);
                            customerLogin.IsLocked = 1;
                            
                            //customerLogin.Message = "User account is locked";
                        }
                        else
                        {
                            customerLoginDAO.UpdateLoginAttempts(username, maxCount + 1, dBConnection);
                           // customerLogin.Message = "Username or Password is incorrect";
                        }
                        customerLogin.LoginAttempt = maxCount + 1;
                        // return false;
                    }*/
               
                }
                else
                {

                    //customerLogin.Message = "Username or Password is incorrect";
                }
                customerLogin.Password = "";
                return customerLogin;
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public string Encryptword(string Encryptval)
        {
            byte[] SrctArray;
            byte[] EnctArray = UTF8Encoding.UTF8.GetBytes(Encryptval);
            SrctArray = UTF8Encoding.UTF8.GetBytes(key);
            TripleDESCryptoServiceProvider objt = new TripleDESCryptoServiceProvider();
            MD5CryptoServiceProvider objcrpt = new MD5CryptoServiceProvider();
            SrctArray = objcrpt.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
            objcrpt.Clear();
            objt.Key = SrctArray;
            objt.Mode = CipherMode.ECB;
            objt.Padding = PaddingMode.PKCS7;
            ICryptoTransform crptotrns = objt.CreateEncryptor();
            byte[] resArray = crptotrns.TransformFinalBlock(EnctArray, 0, EnctArray.Length);
            objt.Clear();
            return Convert.ToBase64String(resArray, 0, resArray.Length);
        }

        public int CreateAdminUser(AdminLogin adminLogin)
        {
            try
            {
                dBConnection = new DBConnection();
                return customerLoginDAO.CreateAdminUser(adminLogin, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateUserName(AdminLogin adminLogin)
        {
            try
            {
                dBConnection = new DBConnection();
                return customerLoginDAO.UpdateUserName(adminLogin, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
        public int DeleteUser(int adminId)
        {
            try
            {
                dBConnection = new DBConnection();
                return customerLoginDAO.DeleteUser(adminId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
        public int UpdatePassword(AdminLogin adminLogin)
        {
            try
            {
                dBConnection = new DBConnection();
                return customerLoginDAO.UpdatePassword(adminLogin, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
/*        public List<UserType> GetUserTypes()
        {
            try
            {
                dBConnection = new DBConnection();
                return customerLoginDAO.GetUserTypes(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }*/
        public List<AdminLogin> GetAllUsers()
        {
            try
            {
                dBConnection = new DBConnection();
                return customerLoginDAO.GetAllUsers(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }


    }

}
