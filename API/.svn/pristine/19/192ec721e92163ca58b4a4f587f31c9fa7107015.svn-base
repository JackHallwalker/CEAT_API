using System;
using System.Collections.Generic;
using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SupremeCourtCore.Controller
{
    public interface PartyTypeController
    {
        List<PartyType> GetAllPartyTypes();
        PartyType GetPartyType(int id);
        int AddPartyType(PartyType partyType);
        int UpdatePartyType(PartyType partyType);
        int DeletePartyType(int partyTypeId);
    }

    public class PartyTypeControllerImpl : PartyTypeController
    {
        DBConnection dBConnection;
        PartyTypeDAO OrderTypeDAO = DAOFactory.CreatePartyTypeDAO();
        public int AddPartyType(PartyType partyType)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.AddPartyType(partyType, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int DeletePartyType(int partyTypeId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.DeletePartyType(partyTypeId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<PartyType> GetAllPartyTypes()
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllPartyTypes(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public PartyType GetPartyType(int id)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetPartyType(id, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdatePartyType(PartyType partyType)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.UpdatePartyType(partyType, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
    }
}
