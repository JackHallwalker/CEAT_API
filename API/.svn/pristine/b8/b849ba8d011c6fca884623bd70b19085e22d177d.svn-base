using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Security.Cryptography;

namespace SupremeCourtCore.Controller
{
    public interface UserLoginController
    {
        UserLogin GetLoginDetails(string username, string password);
        string Encryptword(string Encryptval);
        //int GetLoginIdByUsername(string username);
        //int CheckUserName(string username);
        //int UpdatePasswordByUserId(int userId, string newPassword);
        //int getMaxLoginId();
        int userLoginCreate(UserLogin userLogin);
        int UpdateLogin(UserLogin userLogin);
        int DeleteLoginUser(int userLoginId);
        List<UserLogin> GetAllUsersLogin();
        int UpdateUserLoginActiveStatusByUserId(int userId, int isActive);
        int UpdateUserLoginPasswordByUserId(int userId, string newPassword);
        int UpdateUserLoginUserNameByUserId(int userId, string newUsername);
    }

    public class UserLoginControllerImpl : UserLoginController
    {
        DBConnection dBConnection;
        UserLoginDAO userLoginDAO = DAOFactory.CreateUserLoginDAO();
        string key = "1prt56";

        public UserLogin GetLoginDetails(string username, string password)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.GetLoginDetails(username, password, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
        public string Encryptword(string Encryptval)
        {
            byte[] SrctArray;
            byte[] EnctArray = UTF8Encoding.UTF8.GetBytes(Encryptval);
            SrctArray = UTF8Encoding.UTF8.GetBytes(key);
            TripleDESCryptoServiceProvider objt = new TripleDESCryptoServiceProvider();
            MD5CryptoServiceProvider objcrpt = new MD5CryptoServiceProvider();
            SrctArray = objcrpt.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
            objcrpt.Clear();
            objt.Key = SrctArray;
            objt.Mode = CipherMode.ECB;
            objt.Padding = PaddingMode.PKCS7;
            ICryptoTransform crptotrns = objt.CreateEncryptor();
            byte[] resArray = crptotrns.TransformFinalBlock(EnctArray, 0, EnctArray.Length);
            objt.Clear();
            return Convert.ToBase64String(resArray, 0, resArray.Length);
        }

        //public int getMaxLoginId()
        //{
        //    try
        //    {
        //        dBConnection = new DBConnection();
        //        int loginId = userLoginDAO.getMaxLoginId(dBConnection);

        //        return loginId;

        //    }
        //    catch (Exception)
        //    {
        //        dBConnection.RollBack();

        //        throw;
        //    }
        //    finally
        //    {
        //        if (dBConnection.con.State == System.Data.ConnectionState.Open)
        //            dBConnection.Commit();
        //    }
        //}

        public int userLoginCreate(UserLogin userLogin)
        {
            try
            {
                dBConnection = new DBConnection();

                return userLoginDAO.userLoginCreate(userLogin, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }

        }

        public int UpdateLogin(UserLogin userLogin)
        {
            try
            {
                dBConnection = new DBConnection();

                return userLoginDAO.UpdateLogin(userLogin, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }

        }

        public int DeleteLoginUser(int userLoginId)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.DeleteLoginUser(userLoginId, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<UserLogin> GetAllUsersLogin()
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.GetAllUsersLogin(dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateUserLoginActiveStatusByUserId(int userId, int isActive)
        {
            try
            {
                dBConnection = new DBConnection();
                if (userLoginDAO.CheckUserLoginExitsByUserId(userId, dBConnection))
                {
                    return userLoginDAO.UpdateUserLoginActiveStatusByUserId(userId, isActive, dBConnection);
                }
                else
                {
                    return 0;
                }


            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateUserLoginPasswordByUserId(int userId, string newPassword)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.UpdateUserLoginPasswordByUserId(userId, newPassword, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateUserLoginUserNameByUserId(int userId, string newUsername)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.UpdateUserLoginUserNameByUserId(userId, newUsername, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        /*public int CheckUserName(string username)
        {
            try
            {
                dBConnection = new DBConnection();
                int loginId = userLoginDAO.getMaxLoginId(dBConnection);
                if(userLoginDAO.CheckUserName(username, dBConnection) == 0) {
                    return 0;
                }
                else
                {
                    return 1;
                }

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int GetLoginIdByUsername(string username)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.GetLoginIdByUsername(username,dBConnection);               

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdatePasswordByUserId(int userId, string newPassword)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.UpdatePasswordByUserId(userId, newPassword, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }*/

    }

}
