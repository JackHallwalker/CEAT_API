using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SupremeCourtCore.Controller
{
    public interface ApplicationPartyController
    {
        List<ApplicationParty> GetAllApplicationParties();
        List<ApplicationParty> GetAllApplicationParties(int applicationId);
        ApplicationParty GetApplicationParty(int id);
        int AddApplicationParty(ApplicationParty application);
        int UpdateApplicationParty(ApplicationParty application);
        int DeleteApplicationParty(int applicationId);
    }

    public class ApplicationPartyControllerImpl : ApplicationPartyController
    {
        DBConnection dBConnection;
        ApplicationPartyDAO OrderTypeDAO = DAOFactory.CreateApplicationPartyDAO();
        public int AddApplicationParty(ApplicationParty application)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.AddApplicationParty(application, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int DeleteApplicationParty(int applicationId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.DeleteApplicationParty(applicationId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<ApplicationParty> GetAllApplicationParties(int applicationId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllApplicationParties(applicationId,dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public ApplicationParty GetApplicationParty(int id)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetApplicationParty(id, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateApplicationParty(ApplicationParty application)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.UpdateApplicationParty(application, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<ApplicationParty> GetAllApplicationParties()
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllApplicationParties(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
    }
}
