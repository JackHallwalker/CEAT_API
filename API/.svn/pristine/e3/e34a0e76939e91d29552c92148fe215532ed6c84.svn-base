using System;
using System.Collections.Generic;
using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SupremeCourtCore.Controller
{
    public interface SystemController
    {
        List<Domain.System> GetAllSystems();
        Domain.System GetSystem(int id);
        int AddSystem(Domain.System system);
        int UpdateSystem(Domain.System system);
        int DeleteSystem(int systemId);
    }

    public class SystemControllerImpl : SystemController
    {
        DBConnection dBConnection;
        SystemDAO OrderTypeDAO = DAOFactory.CreateSystemDAO();
        public int AddSystem(Domain.System system)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.AddSystem(system, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int DeleteSystem(int systemId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.DeleteSystem(systemId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Domain.System> GetAllSystems()
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllSystems(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public Domain.System GetSystem(int id)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetSystem(id, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateSystem(Domain.System system)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.UpdateSystem(system, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
    }
}
