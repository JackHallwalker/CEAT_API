using System;
using System.Collections.Generic;
using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SupremeCourtCore.Controller
{
    public interface JudgeController
    {
        List<Judge> GetAllJudges();
        Judge GetJudge(int id);
        int AddJudge(Judge judge);
        int UpdateJudge(Judge judge);
        int DeleteJudge(int judgeId);
        List<Schedule> GetJudgeSchedule(int judgeId, string date);
        List<Schedule> GetJudgeScheduleByDate(string date);
    }

    public class JudgeControllerImpl : JudgeController
    {
        DBConnection dBConnection;
        JudgeDAO OrderTypeDAO = DAOFactory.CreateJudgeDAO();

        public int AddJudge(Judge judge)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.AddJudge(judge, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int DeleteJudge(int judgeId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.DeleteJudge(judgeId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Judge> GetAllJudges()
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllJudges(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public Judge GetJudge(int id)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetJudge(id, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateJudge(Judge judge)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.UpdateJudge(judge, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Schedule> GetJudgeSchedule(int judgeId, string date)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetJudgeSchedule(judgeId, date, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Schedule> GetJudgeScheduleByDate(string date)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetJudgeScheduleByDate(date, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

    }
}
