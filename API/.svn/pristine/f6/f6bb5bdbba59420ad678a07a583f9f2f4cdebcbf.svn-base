using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SupremeCourtCore.Controller
{
    public interface JournalController
    {
        List<Journal> GetAllJournals(int applicationId);
        List<Journal> GetJournalByCaseNo(string caseNo);
        List<Journal> GetAllJournalsWithPartyTypeId(int applicationId, int partyTypeId);
        Journal GetJournal(int id);
        int AddJournal(Journal journal);
        int UpdateJournal(Journal journal);
        int DeleteJournal(int journalId);
    }

    public class JournalControllerImpl : JournalController
    {
        DBConnection dBConnection;
        JournalDAO OrderTypeDAO = DAOFactory.CreateJournalDAO();
        public int AddJournal(Journal journal)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.AddJournal(journal, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int DeleteJournal(int journalId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.DeleteJournal(journalId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Journal> GetAllJournals(int applicationId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllJournals(applicationId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Journal> GetJournalByCaseNo(string caseNo)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetJournalByCaseNo(caseNo, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<Journal> GetAllJournalsWithPartyTypeId(int applicationId, int partyTypeId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllJournalsWithPartyTypeId(applicationId, partyTypeId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public Journal GetJournal(int id)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetJournal(id, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateJournal(Journal journal)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.UpdateJournal(journal, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
    }
}
