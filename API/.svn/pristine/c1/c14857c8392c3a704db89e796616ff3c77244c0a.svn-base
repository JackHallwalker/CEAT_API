using System;
using System.Collections.Generic;
using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SupremeCourtCore.Controller
{
    public interface CaseTypeController
    {
        List<CaseType> GetAllCaseTypes();
        CaseType GetCaseType(int id);
        int AddCaseType(CaseType caseType);
        int UpdateCaseType(CaseType caseType);
        int DeleteCaseType(int caseTypeId);
    }

    public class CaseTypeControllerImpl : CaseTypeController
    {
        DBConnection dBConnection;
        CaseTypeDAO OrderTypeDAO = DAOFactory.CreateCaseTypeDAO();
        public int AddCaseType(CaseType caseType)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.AddCaseType(caseType, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int DeleteCaseType(int caseTypeId)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.DeleteCaseType(caseTypeId, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<CaseType> GetAllCaseTypes()
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetAllCaseTypes(dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public CaseType GetCaseType(int id)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.GetCaseType(id,dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateCaseType(CaseType caseType)
        {
            try
            {
                dBConnection = new DBConnection();
                return OrderTypeDAO.UpdateCaseType(caseType, dBConnection);
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
    }
}
