using SupremeCourtCore.Common;
using SupremeCourtCore.Domain;
using SupremeCourtCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Web;

using System.Security.Cryptography;


namespace SupremeCourtCore.Controller
{
    public interface SysUserController
    {
        int SaveLogin(SystemUser userLogin);
        int UpdateLogin(SystemUser userLogin);
        SystemUser GetLoginDetails(string username, string password);
        int GetLoginIdByUsername(string username);
        int CheckUserName(string username);
        //bool CheckUserExitsByUserId(int userId);
        int UpdatePasswordByUserId(int userId, string newPassword);
        int UpdateUserNamePasswordByUserId(int userId, string newUserName, string newPassword);
        string Encryptword(string Encryptval);
        int DeleteUser(int sysUserId);
        List<SystemUserReturn> GetAllUsers();
        List<SystemUser> GetAllUsers(int roleId);

        int UpdateLockStatusByUserId(int userId, int isLocked);
        int UpdateActiveStatusByUserId(int userId, int isActive);
        /*        int UpdateLoginDate(SystemUser systemUser);
                int UpdateLoginAttempt(int sysUserId);*/
    }

    public class SysUserControllerImpl : SysUserController
    {
        DBConnection dBConnection;
        SysUserDAO userLoginDAO = DAOFactory.CreateSysUserDAO();
        string key = "1prt56";

        public int SaveLogin(SystemUser userLogin)
        {
            try
            {
                dBConnection = new DBConnection();
                if (userLoginDAO.CheckUserName(userLogin.username, dBConnection) == 0)
                {
                    return userLoginDAO.SaveLogin(userLogin, dBConnection);
                }
                else
                {
                    return -1;
                }

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }

        }

        public int UpdateLogin(SystemUser userLogin)
        {
            try
            {
                dBConnection = new DBConnection();

                return userLoginDAO.UpdateLogin(userLogin, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }

        }

        public SystemUser GetLoginDetails(string username, string password)
        {
            try
            {
                dBConnection = new DBConnection();
                SystemUser userLogin = new SystemUser();
                int user = userLoginDAO.CheckUserName(username, dBConnection);
                //int result = customerLoginDAO.GetLoginDetails(username, password, dBConnection);
                if (user == 1)
                {
                    userLogin = userLoginDAO.GetLoginDetails(username, password, dBConnection);
                    if(userLogin.username == "" || userLogin.username == null)
                    {
                        var systemUser = userLoginDAO.GetUserByUsername(username, dBConnection);
                        userLoginDAO.UpdateLoginAttempt(systemUser, dBConnection);
                    }
                    else
                    {
                        userLoginDAO.UpdateLoginDate(userLogin, dBConnection);
                    }
                }
                else
                {
                }
                userLogin.userPassword = "";
                return userLogin;
            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int CheckUserName(string username)
        {
            try
            {
                dBConnection = new DBConnection();
                if (userLoginDAO.CheckUserName(username, dBConnection) == 0)
                {
                    return 0;
                }
                else
                {
                    return 1;
                }

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int GetLoginIdByUsername(string username)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.GetLoginIdByUsername(username, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdatePasswordByUserId(int userId, string newPassword)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.UpdatePasswordByUserId(userId, newPassword, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateUserNamePasswordByUserId(int userId, string newUserName, string newPassword)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.UpdateUserNamePasswordByUserId(userId, newUserName, newPassword, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public string Encryptword(string Encryptval)
        {
            byte[] SrctArray;
            byte[] EnctArray = UTF8Encoding.UTF8.GetBytes(Encryptval);
            SrctArray = UTF8Encoding.UTF8.GetBytes(key);
            TripleDESCryptoServiceProvider objt = new TripleDESCryptoServiceProvider();
            MD5CryptoServiceProvider objcrpt = new MD5CryptoServiceProvider();
            SrctArray = objcrpt.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
            objcrpt.Clear();
            objt.Key = SrctArray;
            objt.Mode = CipherMode.ECB;
            objt.Padding = PaddingMode.PKCS7;
            ICryptoTransform crptotrns = objt.CreateEncryptor();
            byte[] resArray = crptotrns.TransformFinalBlock(EnctArray, 0, EnctArray.Length);
            objt.Clear();
            return Convert.ToBase64String(resArray, 0, resArray.Length);
        }

        public int DeleteUser(int sysUserId)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.DeleteUser(sysUserId, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<SystemUserReturn> GetAllUsers()
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.GetAllUsers(dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public List<SystemUser> GetAllUsers(int roleId)
        {
            try
            {
                dBConnection = new DBConnection();
                return userLoginDAO.GetAllUsers(roleId, dBConnection);

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateLockStatusByUserId(int userId, int isLocked)
        {
            try
            {
                dBConnection = new DBConnection();
                if (userLoginDAO.CheckUserExitsByUserId(userId, dBConnection))
                {
                    return userLoginDAO.UpdateLockStatusByUserId(userId, isLocked, dBConnection);
                }
                else
                {
                    return 0;
                }


            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }

        public int UpdateActiveStatusByUserId(int userId, int isActive)
        {
            try
            {
                dBConnection = new DBConnection();
                if(userLoginDAO.CheckUserExitsByUserId(userId, dBConnection))
                {
                    return userLoginDAO.UpdateActiveStatusByUserId(userId, isActive, dBConnection);
                }
                else
                {
                    return 0;
                }
                

            }
            catch (Exception)
            {
                dBConnection.RollBack();

                throw;
            }
            finally
            {
                if (dBConnection.con.State == System.Data.ConnectionState.Open)
                    dBConnection.Commit();
            }
        }
    }
}
